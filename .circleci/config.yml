version: 2.1
orbs:
  android: circleci/android@2.1.2
  flutter: circleci/flutter@1.1.0
  ruby: circleci/ruby@1.8.0
  node: circleci/node@1.1.6

executors:
  app-executor:
    docker:
      - image: circleci/flutter@1.1.0
    working_directory: ~/repo
  docker-publisher:
    environment:
      IMAGE_NAME: nghialmt/flutter_distribution
    docker:
      - image: circleci/buildpack-deps:stretch

jobs:
  build-and-test-flutter:
    docker:
      - image: cirrusci/flutter
    steps:
      - checkout:
          name: Checkout to the current branch to perform further tasks

      - run:
          name: 'Check enable to build'
          shell: /bin/bash
          command: |
            if [ -n "$CIRCLE_PULL_REQUEST" ]; then
              if [[ $CIRCLE_PULL_REQUEST =~ ^.*/(.*)$ ]]; then
                echo "Get Pull Request status PR No=${BASH_REMATCH[1]}"
                state=$(curl \
                 -H "Authorization: token $GITHUB_API_PERSONAL_ACCESS_TOKEN" \
                 "https://api.github.com/repos/nghialmt/flutter_distribution/pulls/${BASH_REMATCH[1]}" | \
                  python3 -c "import sys, json; print(json.load(sys.stdin)['state'])")

                echo "PR State=$state"
                if [ $state = "open" ]; then
                  echo "Since the pull request has been issued, the succeeding job will be executed. $CIRCLE_PULL_REQUEST"
                  exit 0
                else
                  echo "The workflow will be canceled because the pull request is closed."
                  curl -u ${CIRCLECI_TOKEN}: -X POST --header "Content-Type: application/json" --url https://circleci.com/api/v2/workflow/${CIRCLE_WORKFLOW_ID}/cancel
                fi
              fi
            else
              echo "The workflow will be canceled because the pull request has not been issued."
              curl -u ${CIRCLECI_TOKEN}: -X POST --header "Content-Type: application/json" --url https://circleci.com/api/v2/workflow/${CIRCLE_WORKFLOW_ID}/cancel
            fi

      - run:
          name: What is the current branch
          command: echo ${CIRCLE_BRANCH}
      - run: flutter doctor
      - run:
          name: get latest dependecies for flutter
          command: flutter pub get

      - run:
          name: automated check for your flutter code(linting)
          command: flutter analyze

  android-build-and-send-appdistribution:
    parameters:
      deploy_to:
        type: string
        default: "production"
      app-dir:
        default: .
        description: Path to the directory containing your pubspec.yaml file. Not needed if pubspec.yaml lives in the root.
        type: string
      cache-version:
        default: v1
        description: Change the default cache version if you need to clear the cache for any reason.
        type: string

    docker:
      - image: cirrusci/flutter

    environment:
      GRADLE_OPTS: -Xmx3072m -Dorg.gradle.daemon=false -Dorg.gradle.jvmargs="-Xmx3072m"
      LC_ALL: en_US.UTF-8
      LANG: en_US.UTF-8
    resource_class: medium
    working_directory: ~/flutter_distribution

    steps:
      - checkout:
          path: ~/flutter_distribution

      - run: flutter pub get
      - restore_cache:
          keys:
            - bundle-v1-android-{{ checksum "android/Gemfile.lock" }}
            - bundle-v1-android-
      - run:
          command: bundle install
          working_directory: android

      - save_cache:
          background: true
          key: bundle-v1-android-{{ checksum "android/Gemfile.lock" }}
          paths:
            - vendor/bundle

      - run:
          name: Create keystore.properties
          command: printf 'FLUTTER_PRODUCTION_UPLOAD_KEY_ALIAS=%s\nFLUTTER_PRODUCTION_UPLOAD_KEY_PASSWORD=%s\nFLUTTER_PRODUCTION_UPLOAD_STORE_FILE=%s\nFLUTTER_PRODUCTION_UPLOAD_STORE_PASSWORD=%s' \
            $FLUTTER_PRODUCTION_UPLOAD_KEY_ALIAS $FLUTTER_PRODUCTION_UPLOAD_KEY_PASSWORD $FLUTTER_PRODUCTION_UPLOAD_STORE_FILE $FLUTTER_PRODUCTION_UPLOAD_STORE_PASSWORD > keystore.properties
          working_directory: android


      - run:
          name: Decode Android key store
          command: echo "$BASE64_KEYSTORE" | base64 -d | tee keystore app/keystore > /dev/null
          working_directory: android


      - run:
          name: fastlane <<parameters.deploy_to>>
          command: bundle exec fastlane <<parameters.deploy_to>>
          working_directory: android

workflows:
  build-and-deploy:
    jobs:
      - build-and-test-flutter:
          filters:
            branches:
              ignore:
                - develop
      - production-approval-android:
          type: approval
          requires:
            - build-and-test-flutter
      - android-build-and-send-appdistribution:
          requires:
            - production-approval-android
          deploy_to: "production"